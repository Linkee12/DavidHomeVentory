// AUTO-GENERATED by yerpc-derive

import * as T from "./types.js"
import * as RPC from "./jsonrpc.js"

type RequestMethod = (method: string, params?: RPC.Params) => Promise<unknown>;
type NotificationMethod = (method: string, params?: RPC.Params) => void;

interface Transport {
  request: RequestMethod,
  notification: NotificationMethod
}

export class RawClient {
  constructor(private _transport: Transport) {}


  public authenticate(data: T.AuthRequestBody): Promise<T.GenericResponse<T.AuthResponseSuccess,T.GenericError>> {
    return (this._transport.request('authenticate', [data] as RPC.Params)) as Promise<T.GenericResponse<T.AuthResponseSuccess,T.GenericError>>;
  }


  public setPassword(data: T.AuthRequestBody): Promise<T.SetPasswordResponse> {
    return (this._transport.request('set_password', [data] as RPC.Params)) as Promise<T.SetPasswordResponse>;
  }


}
