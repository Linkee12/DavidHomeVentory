// AUTO-GENERATED by yerpc-derive

import * as T from "./types.js"
import * as RPC from "./jsonrpc.js"

type RequestMethod = (method: string, params?: RPC.Params) => Promise<unknown>;
type NotificationMethod = (method: string, params?: RPC.Params) => void;

interface Transport {
  request: RequestMethod,
  notification: NotificationMethod
}

export class RawClient {
  constructor(private _transport: Transport) {}


  public list(keyword: (string|null), parentId: (string|null), token: string): Promise<T.GenericAuthedResponse<T.IndexSuccessResponse,T.GenericError>> {
    return (this._transport.request('list', [keyword, parentId, token] as RPC.Params)) as Promise<T.GenericAuthedResponse<T.IndexSuccessResponse,T.GenericError>>;
  }


  public delete(id: string, token: string): Promise<T.GenericAuthedResponse<T.DeleteSuccessResponse,T.GenericError>> {
    return (this._transport.request('delete', [id, token] as RPC.Params)) as Promise<T.GenericAuthedResponse<T.DeleteSuccessResponse,T.GenericError>>;
  }


  public create(data: T.CreateWarehouseEntry, token: string): Promise<T.GenericAuthedResponse<T.CreateSuccessResponse,T.GenericError>> {
    return (this._transport.request('create', [data, token] as RPC.Params)) as Promise<T.GenericAuthedResponse<T.CreateSuccessResponse,T.GenericError>>;
  }


  public put(id: string, data: T.WarehouseEntry, token: string): Promise<T.GenericAuthedResponse<T.CreateSuccessResponse,T.GenericError>> {
    return (this._transport.request('put', [id, data, token] as RPC.Params)) as Promise<T.GenericAuthedResponse<T.CreateSuccessResponse,T.GenericError>>;
  }


  public getOrCreate(id: string, token: string): Promise<T.GenericAuthedResponse<T.WarehouseEntryInsertedWithPath,T.GenericError>> {
    return (this._transport.request('get_or_create', [id, token] as RPC.Params)) as Promise<T.GenericAuthedResponse<T.WarehouseEntryInsertedWithPath,T.GenericError>>;
  }


}
